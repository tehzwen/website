{"version":3,"sources":["Resources/selfie.jpg","Resources sync /^/.*$","Resources/appraisaleLogo.png","Resources/defaultProject.jpg","Resources/discordLogo.jpg","Resources/glCubes.png","Components/Footer.js","Components/MyHeader.js","Components/ProjectBlock.js","Components/ProjectPage.js","Components/Buttons.js","Components/IndicatorDots.js","Components/index.js","Pages/About.js","Pages/Appraisale.js","Pages/CUDP.js","Pages/DiscordBot.js","Pages/Home.js","Pages/RPS.js","Pages/Projects.js","Pages/Tweet.js","Pages/Blog.js","Components/GLCanvas.js","Pages/index.js","Pages/WebGL.js","Components/RouteManager.js","App.js","serviceWorker.js","index.js","Resources/blogs/index.js","Resources/discordBot1.png","Resources/discordBot2.png","Resources/discordBot3.png","Resources/discordBot4.png","Resources/discordBot5.png"],"names":["module","exports","__webpack_require__","p","map","./appraisaleLogo.png","./blogs","./blogs/","./blogs/06-29-2019","./blogs/06-29-2019.json","./blogs/07-08-2019","./blogs/07-08-2019.json","./blogs/08-30-2019","./blogs/08-30-2019.json","./blogs/12-27-2019","./blogs/12-27-2019.json","./blogs/index","./blogs/index.js","./defaultProject.jpg","./discordBot1.png","./discordBot2.png","./discordBot3.png","./discordBot4.png","./discordBot5.png","./discordLogo.jpg","./glCubes.png","./selfie.jpg","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","Footer","react_default","a","createElement","Grid","Row","className","Column","Component","MyHeader","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","centered","columns","width","as","Link","to","Header","ProjectBlock","_this","state","imageString","titleLink","toProjectPage","contructTotalString","bind","assertThisInitialized","goToLink","stringVal","title","split","setState","require","join","toLowerCase","undefined","imageName","_this2","textAlign","onClick","history","push","verticalAlign","alt","src","ProjectPage","videos","video","window","scrollTo","src_Components","description","styles","wrapper","position","zIndex","bottom","btn","height","cursor","userSelect","font","color","left","marginLeft","right","marginRight","Dot","style","display","borderRadius","backgroundColor","margin","opacity","selected","transitionDuration","Components","RouteManager","Buttons","prevBtnStyle","assign","nextBtnStyle","index","total","loop","prevHandler","nextHandler","IndicatorDots","wrapperStyle","Array","apply","x","i","key","About","marginBottom","Image","size","rounded","href","target","Appraisale","Components_ProjectPage","Embed","active","autoplay","iframe","allowFullScreen","source","React","CUDP","DiscordBot","Home","marginTop","Button","RPS","Projects","data","item","carousel_default","widgets","frameBorder","allow","createProjectList","Tweet","Blog","handlePaginationClick","loadAnimationVisible","setTimeout","currentPage","activePage","createBlogPosts","renderCurrentBlog","textGetLinks","blogPosts","sort","b","Date","date","text","link","links","length","indexOf","substring","linkref","linktext","post","overallArr","subtitles","subtitle","content","parent","toDateString","getSubtitleContentLayout","Transition","visible","animation","duration","Pagination","defaultActivePage","totalPages","onPageChange","GLCanvas","camera","vec3","fromValues","center","up","refs","glCanvas","gl","getContext","console","error","canvas","setup","shaderProgram","initShaderProgram","programInfo","program","attribLocations","vertexPosition","getAttribLocation","vertexColour","uniformLocations","projection","getUniformLocation","view","model","cameraPosition","type","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeStr","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","deleteShader","vsSource","fsSource","vertexShader","loadShader","fragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","positions","colours","indicesArray","vertexArrayObject","createVertexArray","bindVertexArray","vao","attributes","initPositionAttribute","colour","initColourAttribute","indices","initIndexBuffer","numVertices","scale","Float32Array","Uint16Array","buffers","initBuffers","rot","mat4","create","identity","rotation","centroid","calculateCentroid","vertices","t","add","positionArray","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","FLOAT","vertexAttribPointer","enableVertexAttribArray","colourArray","colourBuffer","elementArray","indexBuffer","ELEMENT_ARRAY_BUFFER","objects","deltaTime","_this3","enable","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","CULL_FACE","cullFace","BACK","frontFace","CCW","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","useProgram","forEach","object","rotateY","rotateX","rotateZ","projectionMatrix","fovy","Math","PI","aspect","clientWidth","clientHeight","perspective","uniformMatrix4fv","viewMatrix","lookAt","modelMatrix","negCentroid","negate","translate","mul","drawElements","TRIANGLES","UNSIGNED_SHORT","log","initializeShaderProgram","centerCube","createCube","sCube1","sCube2","sCube3","sCube4","then","that","angle","requestAnimationFrame","render","now","surrounding","slice","floor","draw","ref","Screens","WebGL","GLCanvas_GLCanvas","_Component","inherits","createClass","value","HashRouter","basename","Switch","Route","exact","path","Redirect","routeProps","Pages","App","Components_RouteManager","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","r","__webpack_exports__","_07_08_2019_json__WEBPACK_IMPORTED_MODULE_0__","_06_29_2019_json__WEBPACK_IMPORTED_MODULE_1__","_08_30_2019_json__WEBPACK_IMPORTED_MODULE_2__","_12_27_2019_json__WEBPACK_IMPORTED_MODULE_3__","capstone","responsiveUpdate","internship","graphicsSemester"],"mappings":"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","file":"static/js/main.f9a77e25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/selfie.fe5e7897.jpg\";","var map = {\n\t\"./appraisaleLogo.png\": 295,\n\t\"./blogs\": 48,\n\t\"./blogs/\": 48,\n\t\"./blogs/06-29-2019\": 87,\n\t\"./blogs/06-29-2019.json\": 87,\n\t\"./blogs/07-08-2019\": 86,\n\t\"./blogs/07-08-2019.json\": 86,\n\t\"./blogs/08-30-2019\": 88,\n\t\"./blogs/08-30-2019.json\": 88,\n\t\"./blogs/12-27-2019\": 89,\n\t\"./blogs/12-27-2019.json\": 89,\n\t\"./blogs/index\": 48,\n\t\"./blogs/index.js\": 48,\n\t\"./defaultProject.jpg\": 296,\n\t\"./discordBot1.png\": 95,\n\t\"./discordBot2.png\": 96,\n\t\"./discordBot3.png\": 97,\n\t\"./discordBot4.png\": 98,\n\t\"./discordBot5.png\": 99,\n\t\"./discordLogo.jpg\": 297,\n\t\"./glCubes.png\": 298,\n\t\"./selfie.jpg\": 100\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 294;","module.exports = __webpack_public_path__ + \"static/media/appraisaleLogo.fa040672.png\";","module.exports = __webpack_public_path__ + \"static/media/defaultProject.aa60b576.jpg\";","module.exports = __webpack_public_path__ + \"static/media/discordLogo.c7087c63.jpg\";","module.exports = __webpack_public_path__ + \"static/media/glCubes.b6113906.png\";","import React, { Component } from 'react'\r\nimport { Grid } from 'semantic-ui-react';\r\n\r\nclass Footer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Grid.Row className=\"Footer-div\">\r\n                <Grid.Column>\r\n                    <p className=\"FooterText\"><b>Zachary Shaw</b></p>\r\n                    <p className=\"FooterText\">Ⓒ\tCopyright 2018-2019</p>\r\n                    <p className=\"FooterText\"><i>All rights reserved.</i></p>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport { Grid, Header } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass MyHeader extends Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid.Row className=\"Siteheader\" centered columns={'equal'}>\r\n                <Grid.Column width={2} className=\"Headerlink\" as={Link} to=\"/home\">\r\n                    <center>\r\n                        <Header as=\"h3\">Home</Header>\r\n                    </center>\r\n                </Grid.Column>\r\n                <Grid.Column width={2} className=\"Headerlink\" as={Link} to=\"/projects\">\r\n                    <center>\r\n                        <Header as=\"h3\">Projects</Header>\r\n                    </center>\r\n                </Grid.Column>\r\n                <Grid.Column width={2} className=\"Headerlink\" as={Link} to=\"/blog\" >\r\n                    <center>\r\n                        <Header as=\"h3\">Blog</Header>\r\n                    </center>\r\n                </Grid.Column>\r\n                <Grid.Column width={2} className=\"Headerlink\" as={Link} to=\"/about\">\r\n                    <center>\r\n                        <Header as=\"h3\">About</Header>\r\n                    </center>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyHeader;","import React, { Component } from 'react'\r\nimport { Grid } from 'semantic-ui-react';\r\n\r\nclass ProjectBlock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageString: \"\",\r\n            titleLink: \"\",\r\n            toProjectPage: false\r\n        };\r\n\r\n        this.contructTotalString = this.contructTotalString.bind(this);\r\n        this.goToLink = this.goToLink.bind(this);\r\n    }\r\n\r\n    contructTotalString(stringVal) {\r\n        let tempString = this.props.title;\r\n        tempString.split(\" \");\r\n\r\n        this.setState({\r\n            imageString: require(\"../Resources/\" + stringVal),\r\n            titleLink: \"/\" + this.props.title.split(\" \").join(\"\").toLowerCase() + \"/\",\r\n        });\r\n    }\r\n\r\n    goToLink() {\r\n        this.setState({\r\n            toProjectPage: true\r\n        });\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.imageName !== undefined) {\r\n            this.contructTotalString(this.props.imageName);\r\n        }\r\n        else {\r\n            this.contructTotalString(\"defaultProject.jpg\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Grid textAlign=\"center\">\r\n                <Grid.Row onClick={() => {this.props.history.push(this.state.titleLink)}} verticalAlign=\"middle\" className=\"ProjectContainer\">\r\n                    <Grid.Column width={4}>\r\n                        <img\r\n                            alt={\"not found\"}\r\n                            className=\"ProjectImage\"\r\n                            src={this.state.imageString}>\r\n                        </img>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={10}>\r\n                        <h2>{this.props.title}</h2>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProjectBlock;","import React, { Component } from 'react'\r\nimport Components from '../Components/index';\r\nimport { Grid } from 'semantic-ui-react';\r\n\r\nclass ProjectPage extends Component {\r\n\r\n    renderVideos() {\r\n        return this.props.videos.map((video) => {\r\n            return video;\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid className=\"App\">\r\n                <Components.MyHeader />\r\n                {this.props.title ? <Grid.Row className=\"AppRow\">\r\n                    <Grid.Column>\r\n                        <h3 className=\"ProjectPageTitle\">{this.props.title}</h3>\r\n                    </Grid.Column>\r\n                </Grid.Row> : null}\r\n                {this.props.description}\r\n                <Grid.Row className=\"AppRow\">\r\n                    <Grid.Column>\r\n                        <center>{this.props.videos}</center>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <Components.Footer />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\nexport default ProjectPage;","import React from 'react'\r\nimport propTypes from 'prop-types'\r\n\r\nconst styles = {\r\n  wrapper: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    zIndex: '100',\r\n    bottom: '0',\r\n    textAlign: 'center'\r\n  },\r\n  btn: {\r\n    width: '30px',\r\n    height: '30px',\r\n    cursor: 'pointer',\r\n    userSelect: 'none',\r\n    position: 'absolute',\r\n    bottom: '0',\r\n    font: '16px/30px sans-serif',\r\n    color: 'rgba(0,0,0,0.8)'\r\n  },\r\n  left: {\r\n    left: '0',\r\n    marginLeft: '300px'\r\n  },\r\n  right: {\r\n    right: '0',\r\n    marginRight: '300px'\r\n  }\r\n}\r\n\r\nexport default function Buttons (props) {\r\n  const prevBtnStyle = Object.assign({}, styles.btn, styles.left)\r\n  const nextBtnStyle = Object.assign({}, styles.btn, styles.right)\r\n  const { index, total, loop, prevHandler, nextHandler } = props\r\n  return (\r\n    <div style={styles.wrapper}>\r\n      { (loop || index !== 0) && (\r\n        <div style={prevBtnStyle} onClick={prevHandler}>◀</div>\r\n      )}\r\n      { (loop || index !== total - 1) && (\r\n        <div style={nextBtnStyle} onClick={nextHandler}>▶</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nButtons.propTypes = {\r\n  index: propTypes.number.isRequired,\r\n  total: propTypes.number.isRequired,\r\n  prevHandler: propTypes.func,\r\n  nextHandler: propTypes.func\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Dot (props) {\r\n  return (\r\n    <span style={{\r\n      display: 'inline-block',\r\n      height: '8px',\r\n      width: '8px',\r\n      borderRadius: '4px',\r\n      backgroundColor: 'black',\r\n      margin: '7px 5px',\r\n      opacity: props.selected ? '1' : '0.3',\r\n      transitionDuration: '300ms'\r\n    }} />\r\n  )\r\n}\r\n\r\nexport default function IndicatorDots (props) {\r\n  const wrapperStyle = {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    zIndex: '100',\r\n    bottom: '0px',\r\n    textAlign: 'center'\r\n  }\r\n\r\n  if (props.total < 2) {\r\n    // Hide dots when there is only one dot.\r\n    return <div style={wrapperStyle} />\r\n  } else {\r\n    return (\r\n      <div style={wrapperStyle}>{\r\n        Array.apply(null, Array(props.total)).map((x, i) => {\r\n          return <Dot key={i} selected={props.index === i} />\r\n        })\r\n      }</div>\r\n    )\r\n  }\r\n}\r\n\r\nIndicatorDots.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired\r\n}","import Footer from './Footer';\r\nimport MyHeader from './MyHeader';\r\nimport ProjectBlock from './ProjectBlock';\r\nimport ProjectPage from './ProjectPage';\r\nimport RouteManager from './RouteManager';\r\nimport Buttons from './Buttons'; \r\nimport IndicatorDots from './IndicatorDots';\r\n\r\nconst Components = {\r\n    Footer,\r\n    MyHeader,\r\n    ProjectBlock,\r\n    ProjectPage,\r\n    RouteManager,\r\n    Buttons,\r\n    IndicatorDots\r\n}\r\n\r\nexport default Components;","import React, { Component } from 'react';\r\nimport Components from '../Components/index';\r\nimport { Grid, Image } from 'semantic-ui-react';\r\n\r\n\r\nclass About extends Component {\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Grid centered className=\"App\">\r\n                <Components.MyHeader />\r\n                <Grid.Row className=\"GridRow\" columns={'equal'} textAlign={\"center\"} style={{ marginBottom: \"250px\" }}>\r\n                    <Grid.Column width={6}>\r\n                        <center>\r\n                            <h1 className=\"AboutTitle\">About me</h1>\r\n                            <Image size=\"small\" rounded style={{marginBottom:'25px'}} src={require('../Resources/selfie.jpg')} alt={\"not found\"} />\r\n                            <p className=\"AboutText\">\r\n                                My name is Zachary Shaw and I'm a full time student\r\n                                pursuing a career in Computer Science.\r\n                                I love to program and am constantly working on new projects that help solve\r\n                                everyday problems and make life a little easier for myself and those around me.\r\n                                <br />\r\n                                <br />\r\n                                The purpose of this website is to showcase projects I've made which are all available\r\n                                <a className=\"AboutText\" href=\"https://github.com/tehzwen\" target=\"_blank\"> here</a> as well\r\n                                as under the projects tab on this site. I love working with passionate people\r\n                                on exciting projects. Inquiries can be sent to zachthm@gmail.com.\r\n                                <br />\r\n                                <br />\r\n                                Thank you for visiting my site ☺ </p>\r\n                        </center>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <Components.Footer />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport ProjectPage from '../Components/ProjectPage';\r\nimport { Grid, Embed } from 'semantic-ui-react';\r\n\r\nclass Appraisale extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <ProjectPage\r\n                title=\"Appraisale\"\r\n                description={\r\n                    <Grid.Row className=\"AppRow\">\r\n                        <Grid.Column>\r\n                            <p>\r\n                                This project was part of Startup Edmonton's Student Summer Program where students can apply to come in to their office for free\r\n                                mentoring in starting their own business idea and work on it for the summer. The idea I came up was a local selling platform where\r\n                                posters can get user opinions on how much their product is worth and what they'd be willing to pay for it. Another part of the idea\r\n                                was to use local spots such as cafes and small businesses to have people meet up at for the purchase of said products.\r\n                                <br></br>\r\n                                <br></br>\r\n                                The frontend of the app was written in React Native and the backend was written in Nodejs. As this was the first JavaScript or mobile\r\n                                project I'd ever worked on, alot of it was learned on the fly and honestly learning React in 2 weeks was really tough. The backend relied\r\n                                on Nodejs to handle the requests and utilized MongoDB for storing user data. I chose these technologies because I was unfamiliar with them\r\n                                and wanted to learn them by using them. The backend was hosted on AWS using ec2 and below are some videos of the app being used in realtime\r\n                                on an emulator. They show how logging in worked, user interaction, chatting and appraising all work in the app.\r\n                                <br></br>\r\n                                <br></br>\r\n                                The code for this project is currently private just in case I decide to continue to work on it, however if you'd like examples on\r\n                                how I did certain things in the app feel free to email me and I'd be happy to help.\r\n                            </p>\r\n                        </Grid.Column>\r\n                    </Grid.Row>}\r\n                videos={\r\n                    [\r\n                        <Embed\r\n                            active={true}\r\n                            autoplay={false}\r\n                            key={'mzflvDXl5lE'}\r\n                            style={{ marginBottom: '25px' }}\r\n                            iframe={{ allowFullScreen: true, }}\r\n                            id='mzflvDXl5lE'\r\n                            source='youtube'\r\n                        />,\r\n                        <Embed\r\n                            active={true}\r\n                            autoplay={false}\r\n                            key={'pDTPLMz6f7I'}\r\n                            style={{ marginBottom: '25px' }}\r\n                            iframe={{ allowFullScreen: true, }}\r\n                            id='pDTPLMz6f7I'\r\n                            source='youtube'\r\n                        />,\r\n                        <Embed\r\n                            active={true}\r\n                            autoplay={false}\r\n                            key={'RAdV3-gh3bQ'}\r\n                            style={{ marginBottom: '25px' }}\r\n                            iframe={{ allowFullScreen: true, }}\r\n                            id='RAdV3-gh3bQ'\r\n                            source='youtube'\r\n                        />\r\n                    ]}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Appraisale;","import React from 'react';\r\nimport ProjectPage from '../Components/ProjectPage';\r\nimport { Grid, Embed } from 'semantic-ui-react';\r\n\r\nclass CUDP extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <ProjectPage\r\n                title=\"C UDP Terminal Multiplayer Game\"\r\n                description={\r\n                    <Grid.Row className=\"AppRow\">\r\n                        <Grid.Column>\r\n                            <p>\r\n                                As part of HackEd 2019 in January, myself and a group of 4 other students\r\n                                (Their gitpages: JJJados, CooperWallace, dcharron3, andyip28)\r\n                                worked on a project for 24 hours that involved using C to create a UDP dedicated server\r\n                                and create a client also in C (for Linux/Mac) and C++/Python (Windows) where players\r\n                                could play a simple game across the network.\r\n                                <br></br>\r\n                                <br></br>\r\n                                I originally came up with this idea as a way to get back into C programming as I hadn't\r\n                                done any for over a year. The networking portion was what I mostly worked on and I did a bit\r\n                                of work on the client as well. At the start of the night we dove straight into the project\r\n                                but soon ran into many errors with C networking such as busy sockets (we weren't closing the sockets properly),\r\n                                would work for one computer and not the other and lots of other issues related to the networking project that we\r\n                                were unfamiliar with since this was a first for us all.\r\n                                <br></br>\r\n                                <br></br>\r\n                                For those interested in the gritty details, we used udp to send packets from the server to the client and back\r\n                                in the following way. A player (client) would send a packet containing their current position and username,\r\n                                the server then replies with a char buffer that contains packets of all the other players in the game and their\r\n                                respective x and y coordinates. The buffer contained a short int in the front of it that represented how many\r\n                                packet items were to follow that size so for example if the server replied with a buffer and the first 16 bits\r\n                                made up the number 5 then the client knows that there are 5 player packets to follow in the char buffer (5 other players in the game).\r\n                                The client would then take the information where the other players are and check if their x and y coordinates\r\n                                were within the client's view screen and display them accordingly. The displaying of other players was tricky as\r\n                                the client works in a way where the player doesn't actually move on their screen but the world moves around the player\r\n                                giving a sense of motion but also leaving them with a wider view.\r\n                                <br></br>\r\n                                <br></br>\r\n\r\n                                This was a super fun project that I intend on continuing to work on in the future.\r\n                                The code for this project is available for download <a href=\"https://github.com/tehzwen/Project-CGOD\">here</a>.\r\n                            </p>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                }\r\n                videos={\r\n                    [\r\n                        <Embed\r\n                            active={true}\r\n                            autoplay={false}\r\n                            key={'AzHy3kCW4f8'}\r\n                            style={{ marginBottom: '25px' }}\r\n                            iframe={{ allowFullScreen: true, }}\r\n                            id='AzHy3kCW4f8'\r\n                            source='youtube'\r\n                        />\r\n                    ]\r\n                }\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CUDP;","import React from 'react';\r\nimport ProjectPage from '../Components/ProjectPage';\r\nimport { Grid, Image } from 'semantic-ui-react';\r\n\r\nclass DiscordBot extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ProjectPage\r\n                    title=\"Discord Bot\"\r\n                    description={\r\n                        <Grid.Row className=\"AppRow\">\r\n                            <Grid.Column>\r\n                                <p>\r\n                                    While in my first and second year of school I heard alot of different computing acronyms being used\r\n                                    and one of those was API. I started to write a discord bot in order to better understand how APIs\r\n                                    work and how to incorporate them into a project. The bot started small, simply replying when\r\n                                    users in the server said hello to it and then eventually grew to telling jokes, trivia, displaying\r\n                                    gifs, playing songs in the voice channel and even showing youtube videos in chat.\r\n                                    <br></br>\r\n                                    <br></br>\r\n                                    I was also interested in learning a little bit about databases so I added a function to gamble\r\n                                    against the bot using a points system where the database would track said points and adjust them\r\n                                    accordingly. The bot was fun to work on but a pain to debug because I had it running on my raspberry pi\r\n                                    which required me to control the pi with ssh and push code changes using sftp anytime I needed to change\r\n                                    things.\r\n                                    <br></br>\r\n                                    <br></br>\r\n                                    The project has been untouched for a while (pretty sure the youtube videos/songs don't work 100% anymore need to fix it)\r\n                                    but feel free to download the code <a href=\"https://github.com/tehzwen/discordBot\">here</a> or make suggestions on\r\n                                            what else could be added.\r\n                                </p>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n\r\n                    }\r\n                    videos={[\r\n                        <Image key={0} rounded src={require('../Resources/discordBot1.png')} alt={\"not found\"} />,\r\n                        <Image key={1} className=\"DiscordImage\" src={require('../Resources/discordBot2.png')} alt={\"not found\"} />,\r\n                        <Image key={2} className=\"DiscordImage\" src={require('../Resources/discordBot3.png')} alt={\"not found\"} />,\r\n                        <Image key={3} className=\"DiscordImage\" src={require('../Resources/discordBot4.png')} alt={\"not found\"} />,\r\n                        <Image key={4} className=\"DiscordImage\" src={require('../Resources/discordBot5.png')} alt={\"not found\"} />\r\n                    ]}\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default DiscordBot;","import Components from '../Components/index';\r\nimport { Grid, Header, Button } from 'semantic-ui-react';\r\nimport React from 'react';\r\n\r\nclass Home extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Grid centered className=\"App\">\r\n                <Components.MyHeader />\r\n                <Grid.Row className=\"GridRow\" columns={'equal'} textAlign={\"center\"} style={{ marginTop: \"250px\", marginBottom: \"250px\" }}>\r\n                    <Grid.Column width={10}>\r\n                        <Header className=\"HomeJumboTron\" as=\"h1\">Hello, my name is <b>Zachary Shaw</b></Header>\r\n                        <p>\r\n                            I'm a Canadian Computer Science student who loves making\r\n                            software that solves problems\r\n                        </p>\r\n                        <Button color=\"teal\" onClick={() => this.props.history.push('/projects/')}>Learn more</Button>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <Components.Footer />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport ProjectPage from '../Components/ProjectPage';\r\nimport { Grid, Embed } from 'semantic-ui-react';\r\n\r\nclass RPS extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <ProjectPage\r\n                title=\"OpenCV Rock Paper Scissors\"\r\n                description={\r\n                    <Grid.Row className=\"AppRow\">\r\n                        <Grid.Column>\r\n                            <p>This project was part of a final\r\n                            project for CMPT399 where we were given the option\r\n                            to choose our project and build something that used\r\n                            the concepts taught in class. I decided to use\r\n                            image recognition to play a simple game of rock\r\n                            paper scissors against the computer who chooses a random\r\n                            option. When I started the project I originally started\r\n                            the project I thought using histogram comparison could work,\r\n                            while it did a decent job it had a hard time distinguishing\r\n                            differences in gestures as it relies heavily on color\r\n                            instead of features. After that I thought that AI would surely\r\n                            solve my problems and dove head deep into TensorFlow and tried\r\n                            to use it. After a few hours of training (not nearly long enough)\r\n                            I had a barely functioning, barely understood (by me) agent to\r\n                            classify my gestures.\r\n                            <br></br>\r\n                                <br></br>\r\n                                At long last I decided to give thresholding techniques and template\r\n                                    matching a go and instantly saw results. The only issue would be\r\n                                    providing the templates for the matcher to match. I originally used\r\n                                    one image for each gesture (rock, paper and scissors) and compared\r\n                                    the input from the user against that. It worked relatively well but only\r\n                                    when the hand was in the right angle and orientation that the template\r\n                                image was taken at. My solution was to take multiple template images\r\n                                for each gesture, so I ended up taking 5 images per gesture and then\r\n                                    comparing each input against all 15 template images which slowed down the\r\n                                    comparison but increased the accuracy a ton as you can see in the video it\r\n                                became more robust at accurately detecting the gesture at different angles\r\n                                    and orientations. Overall, was a fun project where I got to put some of\r\n                                the class concepts to the test and experiment.\r\n\r\n                            <br></br>\r\n                                <br></br>\r\n\r\n                                The code for this project is available for download <a href=\"https://github.com/tehzwen/OpencvRockPaperScissors\">here</a>.\r\n                            </p>\r\n\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                }\r\n                videos={[\r\n                    <Embed\r\n                        active={true}\r\n                        autoplay={false}\r\n                        key={'zv2W0okyiHI'}\r\n                        style={{ marginBottom: '25px' }}\r\n                        iframe={{ allowFullScreen: true, }}\r\n                        id='zv2W0okyiHI'\r\n                        source='youtube'\r\n                    />\r\n                ]}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default RPS;","import React, { Component } from 'react'\r\nimport Components from '../Components/index';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport Carousel from 're-carousel';\r\n\r\nclass Projects extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {}\r\n    }\r\n\r\n    createProjectList(data) {\r\n        return data.map((item) => {\r\n            return (<Components.ProjectBlock history={this.props.history} key={item.title + item.imageName} title={item.title} imageName={item.imageName} />)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n\r\n        const projectData = [\r\n            {\r\n                title: \"WebGL Work\",\r\n                imageName: \"glCubes.png\"\r\n            },\r\n            {\r\n                title: \"Appraisale Mobile App\",\r\n                imageName: \"appraisaleLogo.png\"\r\n\r\n            },\r\n            {\r\n                title: \"OpenCV Rock Paper Scissors\",\r\n            },\r\n            {\r\n                title: \"C UDP Programming\",\r\n            },\r\n            {\r\n                title: \"Discord Bot\",\r\n                imageName: \"discordLogo.jpg\"\r\n            }\r\n        ]\r\n\r\n        return (\r\n            <Grid className=\"App\">\r\n                <Components.MyHeader />\r\n\r\n                <Grid.Row style={{ height: '600px' }} textAlign='center'>\r\n                    <Grid.Column>\r\n                        <Carousel loop widgets={[Components.IndicatorDots, Components.Buttons]}>\r\n                            <iframe title=\"ubuntusp4\" width=\"900\" height=\"500\" src=\"https://www.youtube.com/embed/eg5uFrtn7wE\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                            <iframe title=\"rpsopencv\" width=\"900\" height=\"500\" src=\"https://www.youtube.com/embed/zv2W0okyiHI\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                            <iframe title=\"hackathon\" width=\"900\" height=\"500\" src=\"https://www.youtube.com/embed/AzHy3kCW4f8?autofullscreen=1\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                        </Carousel>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        {this.createProjectList(projectData)}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <Components.Footer />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Projects","import React, { Component } from 'react';\r\nimport ProjectPage from '../Components/ProjectPage';\r\n\r\n\r\nclass Tweet extends Component {\r\n\r\n    componentWillMount(){\r\n        window.scrollTo(0,0);\r\n    }\r\n\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <ProjectPage \r\n                title=\"Tweet Analyzer\"/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Tweet;","import React, { Component } from 'react'\r\nimport Components from '../Components/index';\r\nimport { Grid, Pagination, Transition } from 'semantic-ui-react';\r\nimport blogPosts from '../Resources/blogs/index';\r\n\r\nclass Blog extends Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.state = {\r\n            currentPage: 1\r\n        }\r\n\r\n        this.createBlogPosts = this.createBlogPosts.bind(this);\r\n        this.renderCurrentBlog = this.renderCurrentBlog.bind(this);\r\n        this.textGetLinks = this.textGetLinks.bind(this);\r\n    }\r\n\r\n    createBlogPosts() {\r\n        blogPosts.sort((a, b) => {\r\n            return new Date(b.date.split(\"-\")) - new Date(a.date.split(\"-\"));\r\n        })\r\n        this.setState({\r\n            blogPosts: blogPosts\r\n        })\r\n    }\r\n\r\n    handlePaginationClick = (e, data) => {\r\n        this.setState({ loadAnimationVisible: false }, () => {\r\n            setTimeout(() => {\r\n                this.setState({ currentPage: data.activePage, loadAnimationVisible: true })\r\n            }, 300)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Object} text -> represents the object containing the text information from the json file \r\n     * This function checks for links in the text string and handles it accordingly by inserting links into the text\r\n     */\r\n    textGetLinks(text) {\r\n        let link;\r\n\r\n        for (let i = 0; i < this.state.blogPosts[0].links.length; i++) {\r\n            if (this.state.blogPosts[0].links[i].id === text.link) {\r\n                link = this.state.blogPosts[0].links[i];\r\n            }\r\n        }\r\n        let index = text.text.indexOf('$link');\r\n        return (<p>{text.text.substring(0, index)}<a href={link.linkref}>{link.linktext}</a>{text.text.substring(index + 5, text.text.length)}</p>);\r\n    }\r\n\r\n    getSubtitleContentLayout(post) {\r\n        let overallArr = [];\r\n        post.subtitles.map((subtitle, index) => {\r\n            overallArr.push(\r\n                <Grid.Row key={index + \"subtitle\"} className=\"AppRow\">\r\n                    <Grid.Column style={{ marginBottom: '10px' }} width={16}>\r\n                        <h3>{subtitle.title}</h3>\r\n                    </Grid.Column>\r\n                    {post.content.map((text) => {\r\n                        if (text.parent === subtitle.index) {\r\n                            return (\r\n                                <Grid.Column style={{ marginBottom: '5px' }} key={\"text\" + text.text.length} width={16}>\r\n                                    {text.link ? this.textGetLinks(text) : <p>{text.text}</p>}\r\n                                </Grid.Column>\r\n                            )\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    })}\r\n                </Grid.Row>)\r\n            return index;\r\n        })\r\n        return overallArr;\r\n    }\r\n\r\n    renderCurrentBlog(index) {\r\n        let pageLayout = (\r\n            <Grid>\r\n                <Grid.Row className=\"AppRow\">\r\n                    <Grid.Column width={16}>\r\n                        <center><h2>{this.state.blogPosts[index].title}</h2></center>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={16}>\r\n                        <center><h4>{new Date(this.state.blogPosts[index].date.split(\"-\")).toDateString()}</h4></center>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                {this.getSubtitleContentLayout(this.state.blogPosts[index])}\r\n            </Grid>\r\n        )\r\n        return pageLayout;\r\n    }\r\n    componentWillMount() {\r\n        this.setState({ loadAnimationVisible: false })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.createBlogPosts();\r\n        this.setState({ loadAnimationVisible: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.blogPosts && this.state.blogPosts.length > 0) {\r\n            return (\r\n                <Grid centered className=\"App\">\r\n                    <Components.MyHeader />\r\n                    <Transition visible={this.state.loadAnimationVisible} animation=\"fade\" duration={300}>\r\n                        <Grid centered>\r\n\r\n                            <Grid.Row className=\"GridRow\" columns={'equal'} textAlign={\"center\"} style={{ marginBottom: \"200px\" }}>\r\n                                <Grid.Column>\r\n                                    {this.renderCurrentBlog(this.state.currentPage - 1)}\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column>\r\n                                    <center>\r\n                                        <Pagination defaultActivePage={1} totalPages={this.state.blogPosts.length} onPageChange={this.handlePaginationClick} />\r\n                                    </center>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column>\r\n                                    <Components.Footer />\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Transition>\r\n                </Grid >\r\n            )\r\n        } else {\r\n            return (\r\n                <p>Loading..</p>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Blog;","import React, { Component } from 'react'\r\nimport { vec3, mat4 } from 'gl-matrix';\r\n\r\nexport default class GLCanvas extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            camera: {\r\n                position: vec3.fromValues(1.5, 0.0, -2.5),\r\n                center: vec3.fromValues(0.4, 0.0, 0.0),\r\n                up: vec3.fromValues(0.0, 1.0, 0.0),\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.refs.glCanvas) {\r\n\r\n            let gl = this.refs.glCanvas.getContext(\"webgl2\");\r\n            //test if the browser supports webgl\r\n            if (gl === null) {\r\n                console.error('WebGL 2 not supported by your browser',\r\n                    'Check to see you are using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API#WebGL_2_2\" class=\"alert-link\">modern browser</a>.');\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                canvas: this.refs.glCanvas,\r\n                gl: gl\r\n            }, () => {\r\n                this.setup();\r\n            })\r\n        }\r\n    }\r\n\r\n    initializeShaderProgram(gl) {\r\n\r\n        // Vertex shader source code\r\n        const vsSource =\r\n            `#version 300 es\r\n            in vec3 aPosition;\r\n            in vec4 aColor;\r\n\r\n            uniform mat4 uProjectionMatrix;\r\n            uniform mat4 uModelMatrix;\r\n            uniform mat4 uViewMatrix;\r\n\r\n            out vec4 oColor;\r\n            \r\n            void main() {\r\n                oColor = aColor;\r\n                gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aPosition, 1.0);\r\n            }\r\n            `;\r\n\r\n        // Fragment shader source code\r\n        const fsSource =\r\n            `#version 300 es\r\n            precision highp float;\r\n            in vec4 oColor;\r\n            out vec4 fragColor;\r\n            void main() {\r\n                fragColor = oColor;\r\n                //fragColor = vec4(0.2, 0.5, 0.8, 1.0);\r\n            }\r\n            `;\r\n\r\n\r\n        // Create our shader program with our custom function\r\n        const shaderProgram = this.initShaderProgram(gl, vsSource, fsSource);\r\n\r\n        // Collect all the info needed to use the shader program.\r\n        const programInfo = {\r\n            // The actual shader program\r\n            program: shaderProgram,\r\n            // The attribute locations. WebGL will use there to hook up the buffers to the shader program.\r\n            // NOTE: it may be wise to check if these calls fail by seeing that the returned location is not -1.\r\n            attribLocations: {\r\n                vertexPosition: gl.getAttribLocation(shaderProgram, 'aPosition'),\r\n                vertexColour: gl.getAttribLocation(shaderProgram, 'aColor'),\r\n            },\r\n            uniformLocations: {\r\n                projection: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n                view: gl.getUniformLocation(shaderProgram, 'uViewMatrix'),\r\n                model: gl.getUniformLocation(shaderProgram, 'uModelMatrix'),\r\n                cameraPosition: gl.getUniformLocation(shaderProgram, 'uCameraPosition'),\r\n            }\r\n        };\r\n\r\n        // Check to see if we found the locations of our uniforms and attributes\r\n        // Typos are a common source of failure\r\n        if (programInfo.attribLocations.vertexPosition === -1 ||\r\n            programInfo.attribLocations.vertexColour === -1 ||\r\n            programInfo.uniformLocations.projection === -1 ||\r\n            programInfo.uniformLocations.model === -1 ||\r\n            programInfo.uniformLocations.view === -1 ||\r\n            programInfo.uniformLocations.cameraPosition === -1) {\r\n            console.error('Shader Location Error', 'One or more of the uniform and attribute variables in the shaders could not be located');\r\n        }\r\n\r\n        return programInfo;\r\n    }\r\n\r\n    loadShader(gl, type, source) {\r\n        // Create a new shader object\r\n        const shader = gl.createShader(type);\r\n\r\n        // Send the source to the shader object\r\n        gl.shaderSource(shader, source);\r\n\r\n        // Compile the shader program\r\n        gl.compileShader(shader);\r\n\r\n        // See if it compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            // Fail with an error message\r\n            var typeStr = '';\r\n            if (type === gl.VERTEX_SHADER) {\r\n                typeStr = 'VERTEX';\r\n            } else if (type === gl.FRAGMENT_SHADER) {\r\n                typeStr = 'FRAGMENT';\r\n            }\r\n            console.error('An error occurred compiling the shader: ' + typeStr, gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    initShaderProgram(gl, vsSource, fsSource) {\r\n        // Use our custom function to load and compile the shader objects\r\n        const vertexShader = this.loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n        const fragmentShader = this.loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n        // Create the shader program by attaching and linking the shader objects\r\n        const shaderProgram = gl.createProgram();\r\n        gl.attachShader(shaderProgram, vertexShader);\r\n        gl.attachShader(shaderProgram, fragmentShader);\r\n        gl.linkProgram(shaderProgram);\r\n\r\n        // If creating the shader program failed, alert\r\n\r\n        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n            alert('Unable to link the shader program' + gl.getProgramInfoLog(shaderProgram));\r\n            return null;\r\n        }\r\n\r\n        return shaderProgram;\r\n    }\r\n\r\n\r\n    initBuffers(gl, programInfo, positions, colours, indicesArray) {\r\n        // Allocate and assign a Vertex Array Object to our handle\r\n        var vertexArrayObject = gl.createVertexArray();\r\n\r\n        // Bind our Vertex Array Object as the current used object\r\n        gl.bindVertexArray(vertexArrayObject);\r\n\r\n        return {\r\n            vao: vertexArrayObject,\r\n            attributes: {\r\n                position: this.initPositionAttribute(gl, programInfo, positions),\r\n                colour: this.initColourAttribute(gl, programInfo, colours),\r\n            },\r\n            indices: this.initIndexBuffer(gl, indicesArray),\r\n            numVertices: indicesArray.length,\r\n        };\r\n    }\r\n\r\n    createCube(programInfo, position, scale) {\r\n        const positions = new Float32Array([\r\n            0.0, 0.0, 0.0,\r\n            0.0, 0.5, 0.0,\r\n            0.5, 0.5, 0.0,\r\n            0.5, 0.0, 0.0,\r\n\r\n            0.0, 0.0, 0.5,\r\n            0.0, 0.5, 0.5,\r\n            0.5, 0.5, 0.5,\r\n            0.5, 0.0, 0.5,\r\n\r\n            0.0, 0.5, 0.5,\r\n            0.0, 0.5, 0.0,\r\n            0.5, 0.5, 0.0,\r\n            0.5, 0.5, 0.5,\r\n\r\n            0.0, 0.0, 0.5,\r\n            0.5, 0.0, 0.5,\r\n            0.5, 0.0, 0.0,\r\n            0.0, 0.0, 0.0,\r\n\r\n            0.5, 0.0, 0.5,\r\n            0.5, 0.0, 0.0,\r\n            0.5, 0.5, 0.5,\r\n            0.5, 0.5, 0.0,\r\n\r\n            0.0, 0.0, 0.5,\r\n            0.0, 0.0, 0.0,\r\n            0.0, 0.5, 0.5,\r\n            0.0, 0.5, 0.0\r\n        ]);\r\n\r\n        // We have 3 vertices with r, g, b, a colour values\r\n        const colours = new Float32Array([\r\n            0.2, 0.5, 0.2, 1.0,\r\n            1.0, 0.5, 0.2, 1.0,\r\n            0.5, 0.9, 0.0, 1.0,\r\n            0.1, 0.9, 0.8, 1.0,\r\n\r\n            1.0, 0.5, 1.0, 1.0,\r\n            1.0, 0.5, 0.2, 1.0,\r\n            0.5, 0.9, 0.0, 1.0,\r\n            0.1, 0.9, 0.8, 1.0,\r\n\r\n            1.0, 0.5, 1.0, 1.0,\r\n            1.0, 0.5, 0.2, 1.0,\r\n            0.5, 0.9, 0.0, 1.0,\r\n            0.1, 0.9, 0.8, 1.0,\r\n\r\n            1.0, 0.5, 1.0, 1.0,\r\n            1.0, 0.5, 0.2, 1.0,\r\n            0.5, 0.9, 0.0, 1.0,\r\n            0.1, 0.9, 0.8, 1.0,\r\n\r\n            1.0, 0.5, 1.0, 1.0,\r\n            1.0, 0.5, 0.2, 1.0,\r\n            0.5, 0.9, 0.0, 1.0,\r\n            0.1, 0.9, 0.8, 1.0,\r\n\r\n            1.0, 0.5, 1.0, 1.0,\r\n            1.0, 0.5, 0.2, 1.0,\r\n            0.5, 0.9, 0.0, 1.0,\r\n            0.1, 0.9, 0.8, 1.0,\r\n        ]);\r\n\r\n        const indicesArray = new Uint16Array([\r\n            2, 0, 1, 3, 0, 2,\r\n            //backface\r\n            5, 4, 6, 6, 4, 7,\r\n            //top face\r\n            10, 9, 8, 10, 8, 11,\r\n            //bottom face\r\n            13, 12, 14, 14, 12, 15,\r\n            //\r\n            18, 16, 17, 18, 17, 19,\r\n\r\n            22, 21, 20, 23, 21, 22,\r\n        ]);\r\n\r\n        let buffers = this.initBuffers(this.state.gl, programInfo, positions, colours, indicesArray);\r\n        let rot = mat4.create();\r\n        mat4.identity(rot);\r\n\r\n        let centroid = this.calculateCentroid(positions);\r\n\r\n        return {\r\n            buffers,\r\n            position,\r\n            scale,\r\n            rotation: rot,\r\n            centroid\r\n        }\r\n    }\r\n\r\n    calculateCentroid(vertices) {\r\n        var center = vec3.fromValues(0.0, 0.0, 0.0);\r\n        for (let t = 0; t < vertices.length; t += 3) {\r\n            vec3.add(center, center, vec3.fromValues(vertices[t], vertices[t + 1], vertices[t + 2]));\r\n        }\r\n        vec3.scale(center, center, 1 / (vertices.length / 3));\r\n\r\n        return center;\r\n    }\r\n\r\n    initPositionAttribute(gl, programInfo, positionArray) {\r\n\r\n        // Create a buffer for the positions.\r\n        const positionBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n        gl.bufferData(\r\n            gl.ARRAY_BUFFER, // The kind of buffer this is\r\n            positionArray, // The data in an Array object\r\n            gl.STATIC_DRAW // We are not going to change this data, so it is static\r\n        );\r\n\r\n        {\r\n            const numComponents = 3; // pull out 3 values per iteration, ie vec3\r\n            const type = gl.FLOAT; // the data in the buffer is 32bit floats\r\n            const normalize = false; // don't normalize between 0 and 1\r\n            const stride = 0; // how many bytes to get from one set of values to the next\r\n            // Set stride to 0 to use type and numComponents above\r\n            const offset = 0; // how many bytes inside the buffer to start from\r\n\r\n\r\n            // Set the information WebGL needs to read the buffer properly\r\n            gl.vertexAttribPointer(\r\n                programInfo.attribLocations.vertexPosition,\r\n                numComponents,\r\n                type,\r\n                normalize,\r\n                stride,\r\n                offset\r\n            );\r\n            // Tell WebGL to use this attribute\r\n            gl.enableVertexAttribArray(\r\n                programInfo.attribLocations.vertexPosition);\r\n        }\r\n\r\n        return positionBuffer;\r\n    }\r\n\r\n\r\n    initColourAttribute(gl, programInfo, colourArray) {\r\n\r\n        // Create a buffer for the positions.\r\n        const colourBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, colourBuffer);\r\n        gl.bufferData(\r\n            gl.ARRAY_BUFFER, // The kind of buffer this is\r\n            colourArray, // The data in an Array object\r\n            gl.STATIC_DRAW // We are not going to change this data, so it is static\r\n        );\r\n\r\n        {\r\n            const numComponents = 4; // pull out 4 values per iteration, ie vec4\r\n            const type = gl.FLOAT; // the data in the buffer is 32bit floats\r\n            const normalize = false; // don't normalize between 0 and 1\r\n            const stride = 0; // how many bytes to get from one set of values to the next\r\n            // Set stride to 0 to use type and numComponents above\r\n            const offset = 0; // how many bytes inside the buffer to start from\r\n\r\n            // Set the information WebGL needs to read the buffer properly\r\n            gl.vertexAttribPointer(\r\n                programInfo.attribLocations.vertexColour,\r\n                numComponents,\r\n                type,\r\n                normalize,\r\n                stride,\r\n                offset\r\n            );\r\n            // Tell WebGL to use this attribute\r\n            gl.enableVertexAttribArray(\r\n                programInfo.attribLocations.vertexColour);\r\n        }\r\n\r\n        return colourBuffer;\r\n    }\r\n\r\n    initIndexBuffer(gl, elementArray) {\r\n\r\n        // Create a buffer for the positions.\r\n        const indexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n        gl.bufferData(\r\n            gl.ELEMENT_ARRAY_BUFFER, // The kind of buffer this is\r\n            elementArray, // The data in an Array object\r\n            gl.STATIC_DRAW // We are not going to change this data, so it is static\r\n        );\r\n\r\n        return indexBuffer;\r\n    }\r\n\r\n    draw(gl, objects, programInfo, deltaTime) {\r\n        //gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        gl.enable(gl.DEPTH_TEST); // Enable depth testing\r\n        gl.depthFunc(gl.LEQUAL); // Near things obscure far things\r\n        gl.clearDepth(1.0); // Clear everything\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.cullFace(gl.BACK);\r\n        gl.frontFace(gl.CCW);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        gl.useProgram(programInfo.program)\r\n\r\n        objects.forEach((object) => {\r\n            {\r\n                mat4.rotateY(object.rotation, object.rotation, deltaTime);\r\n                mat4.rotateX(object.rotation, object.rotation, deltaTime);\r\n                mat4.rotateZ(object.rotation, object.rotation, deltaTime);\r\n\r\n                var projectionMatrix = mat4.create();\r\n                var fovy = 60.0 * Math.PI / 180.0; // Vertical field of view in radians\r\n                var aspect = this.state.canvas.clientWidth / this.state.canvas.clientHeight; // Aspect ratio of the canvas\r\n                var near = 0.1; // Near clipping plane\r\n                var far = 100.0; // Far clipping plane\r\n\r\n                mat4.perspective(projectionMatrix, fovy, aspect, near, far);\r\n\r\n                gl.uniformMatrix4fv(programInfo.uniformLocations.projection, false, projectionMatrix);\r\n                var viewMatrix = mat4.create();\r\n                mat4.lookAt(\r\n                    viewMatrix,\r\n                    this.state.camera.position,\r\n                    this.state.camera.center,\r\n                    this.state.camera.up,\r\n                );\r\n\r\n                gl.uniformMatrix4fv(programInfo.uniformLocations.view, false, viewMatrix);\r\n                var modelMatrix = mat4.create();\r\n\r\n                var negCentroid = vec3.fromValues(0.0, 0.0, 0.0);\r\n                vec3.negate(negCentroid, object.centroid);\r\n\r\n                mat4.translate(modelMatrix, modelMatrix, object.position);\r\n                mat4.translate(modelMatrix, modelMatrix, object.centroid);\r\n                mat4.mul(modelMatrix, modelMatrix, object.rotation);\r\n                \r\n                mat4.scale(modelMatrix, modelMatrix, object.scale);\r\n                mat4.translate(modelMatrix, modelMatrix, negCentroid);\r\n\r\n                gl.uniformMatrix4fv(programInfo.uniformLocations.model, false, modelMatrix);\r\n                gl.bindVertexArray(object.buffers.vao);\r\n\r\n                // Draw the object\r\n                const offset = 0; // Number of elements to skip before starting\r\n\r\n                //if its a mesh then we don't use an index buffer and use drawArrays instead of drawElements\r\n                gl.drawElements(gl.TRIANGLES, object.buffers.numVertices, gl.UNSIGNED_SHORT, offset);\r\n            }\r\n        })\r\n    }\r\n\r\n    setup() {\r\n        console.log(\"Setting up canvas\");\r\n        let programInfo = this.initializeShaderProgram(this.state.gl);\r\n\r\n        let objects = [];\r\n        //create centered cube\r\n        let centerCube = this.createCube(programInfo, vec3.fromValues(0, 0, 0), vec3.fromValues(1, 1, 1));\r\n        objects.push(centerCube);\r\n\r\n        //create 4 surrounding cubes\r\n        let sCube1 = this.createCube(programInfo, vec3.fromValues(0, 1, 0), vec3.fromValues(1, 1, 1));\r\n        let sCube2 = this.createCube(programInfo, vec3.fromValues(0, -1, 0), vec3.fromValues(1, 1, 1));\r\n        let sCube3 = this.createCube(programInfo, vec3.fromValues(1, 0, 0), vec3.fromValues(1, 1, 1));\r\n        let sCube4 = this.createCube(programInfo, vec3.fromValues(-1, 0, 0), vec3.fromValues(1, 1, 1));\r\n        objects.push(sCube1);\r\n        objects.push(sCube2);\r\n        objects.push(sCube3);\r\n        objects.push(sCube4);\r\n\r\n        var then = 0.0;\r\n        var that = this;\r\n        var angle = 0.007;\r\n\r\n        // This function is called when we want to render a frame to the canvas\r\n        function render(now) {\r\n            now *= 0.001; // convert to seconds\r\n            const deltaTime = now - then;\r\n            then = now\r\n\r\n            //get the surrounding cubes\r\n            let surrounding = objects.slice(1, 5);\r\n\r\n            if (Math.floor(now) % 2 === 0) {\r\n                vec3.add(objects[0].scale, objects[0].scale, vec3.fromValues(angle, angle, angle));\r\n                surrounding.forEach((object) => {\r\n                    vec3.add(object.scale, object.scale, vec3.fromValues(-angle, -angle, -angle));\r\n                })\r\n            } else if (Math.floor(now) % 2 !== 0 && objects[0].scale[0] > 0) {\r\n                vec3.add(objects[0].scale, objects[0].scale, vec3.fromValues(-angle, -angle, -angle));\r\n                surrounding.forEach((object) => {\r\n                    vec3.add(object.scale, object.scale, vec3.fromValues(angle, angle, angle));\r\n                })\r\n            }\r\n\r\n            // Draw our scene\r\n            that.draw(that.state.gl, objects, programInfo, deltaTime);\r\n\r\n            // Request another frame when this one is done\r\n            requestAnimationFrame(render);\r\n        }\r\n\r\n        requestAnimationFrame(render);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas height=\"750\" width=\"750\" ref=\"glCanvas\" />\r\n        )\r\n    }\r\n}","import About from './About';\r\nimport Appraisale from './Appraisale';\r\nimport CUDP from './CUDP';\r\nimport DiscordBot from './DiscordBot';\r\nimport Home from './Home';\r\nimport RPS from './RPS';\r\nimport Projects from './Projects';\r\nimport Tweet from './Tweet';\r\nimport Blog from './Blog';\r\nimport WebGL from './WebGL';\r\n\r\nconst Screens = {\r\n    About,\r\n    Blog,\r\n    Appraisale,\r\n    CUDP,\r\n    DiscordBot,\r\n    Home,\r\n    RPS,\r\n    Projects,\r\n    Tweet,\r\n    WebGL\r\n}\r\n\r\nexport default Screens;","import React from 'react';\r\nimport ProjectPage from '../Components/ProjectPage';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport GLCanvas from '../Components/GLCanvas';\r\n\r\nclass WebGL extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ProjectPage\r\n                description={\r\n                    <Grid.Row className=\"AppRow\">\r\n                        <Grid>\r\n                            <Grid.Row className=\"AppRow\">\r\n                                <Grid.Column>\r\n                                    <h3>WebGL Running in React Example</h3>\r\n                                    <p>\r\n                                        This is a quick example of a fairly simplistic WebGL2 program running in React. \r\n                                        The program uses position and colour buffers to give cubes and multicoloured vertices,\r\n                                        I then create a projection, view and model matrix for the scene and feed all that data \r\n                                        to the GPU which then uses the shader code I've written to display the scene using a camera\r\n                                        and can apply unique rotation and translation.\r\n                            <br></br>\r\n                                        <br></br>\r\n                                        The work done here is synonymous with that of other WebGL work I've done including my <a href=\"https://github.com/tehzwen/WebGLEngine\">WebGL engine </a> \r\n                                        which does similar work but without the use of React. In the engine I apply shading models of flat shading and \r\n                                        the <a href=\"https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_reflection_model\">blinn-phong lighting model</a>.\r\n                            <br></br>\r\n                                        <br></br>\r\n                                        I am currently working on an OpenGL engine using the Golang programming language that will utilize electron as its front end and then provide \r\n                                        rendering using Go and OpenGL. The project is currently in development and very much still in development. It can be found <a href=\"https://github.com/tehzwen/GoGL\">here.</a>\r\n                        </p>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row className=\"AppRow\">\r\n                                <Grid.Column>\r\n                                    <center>\r\n                                        <GLCanvas />\r\n                                    </center>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Grid.Row>\r\n\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default WebGL;","import React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport Screens from '../Pages/index.js';\r\n\r\nexport class RouteManager extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter basename=\"/\">\r\n                <Switch>\r\n                    <Route exact path=\"/\" render={() => { return <Redirect to=\"/home\" /> }} />\r\n                    <Route path=\"/home\" render={(routeProps) => (<Screens.Home {...routeProps} />)} />\r\n                    <Route path=\"/blog/\" render={(routeProps) => (<Screens.Blog {...routeProps} />)} />\r\n                    <Route path=\"/projects/\" render={(routeProps) => (<Screens.Projects {...routeProps} />)} />\r\n                    <Route path=\"/opencvrockpaperscissors/\" render={(routeProps) => (<Screens.RPS {...routeProps} />)} />\r\n                    <Route path=\"/about/\" render={(routeProps) => (<Screens.About {...routeProps} />)} />\r\n                    <Route path=\"/appraisalemobileapp/\" render={(routeProps) => (<Screens.Appraisale {...routeProps} />)} />\r\n                    <Route path=\"/cudpprogramming/\" render={(routeProps) => (<Screens.CUDP {...routeProps} />)} />\r\n                    <Route path=\"/discordbot/\" render={(routeProps) => (<Screens.DiscordBot {...routeProps} />)} />\r\n                    <Route path=\"/webglwork/\" render={(routeProps) => (<Screens.WebGL {...routeProps} />)} />\r\n                </Switch>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RouteManager;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport RouteManager from './Components/RouteManager';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <RouteManager/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import responsiveUpdate from './07-08-2019.json';\r\nimport capstone from './06-29-2019.json';\r\nimport internship from './08-30-2019.json';\r\nimport graphicsSemester from './12-27-2019.json';\r\n\r\nlet blogPosts = [\r\n    capstone,\r\n    responsiveUpdate,\r\n    internship,\r\n    graphicsSemester\r\n]\r\n\r\nexport default blogPosts;","module.exports = __webpack_public_path__ + \"static/media/discordBot1.e88f3d01.png\";","module.exports = __webpack_public_path__ + \"static/media/discordBot2.088d791d.png\";","module.exports = __webpack_public_path__ + \"static/media/discordBot3.d8d2d0bc.png\";","module.exports = __webpack_public_path__ + \"static/media/discordBot4.3449c057.png\";","module.exports = __webpack_public_path__ + \"static/media/discordBot5.709da5e8.png\";"],"sourceRoot":""}